[
  {
    "objectID": "heatmap.html",
    "href": "heatmap.html",
    "title": "preprocess",
    "section": "",
    "text": "Code\n# targets::tar_load(params2$ss)\n# ss&lt;-eval(rlang::sym(params2$ss))"
  },
  {
    "objectID": "heatmap.html#illumina-infinium-methylation-arrays",
    "href": "heatmap.html#illumina-infinium-methylation-arrays",
    "title": "preprocess",
    "section": "Illumina Infinium Methylation Arrays",
    "text": "Illumina Infinium Methylation Arrays\nThis technical guide covers how to analyze Illumina methylation Beadchips arrays commonly known as EPIC/450K methylation arrays. here some description about a methylation array and how it is prepeared…"
  },
  {
    "objectID": "heatmap.html#preprocessing",
    "href": "heatmap.html#preprocessing",
    "title": "preprocess",
    "section": "Preprocessing",
    "text": "Preprocessing\nThe first step once you have your data is to load it to R in an appropriate format. The ´minfi´ packages provides read.metharray functions for this purpose. Also the functions read.metharray.sheet, read.metharray.exp can be used. Those are wrappers around read.metharray to make it easier for the user. Check this guideline or type vignette(\"minfi) on an R console for more info. In this case a built in function cnv.methyl::read.metharray.exp.par() is used which is a wrapper for minfi formula with parallelization to speed up this process a little bit.\nIn order to use any of this formulas we first need to generate the sample_sheet.\n\nSample sheet\nThe sample sheet contains inforamtion about your samples and the experimental setup. It is mandatory to respect the column names in order to make the pipline work. ##It must contain the following columns: - Sample_Name - Basename\n##Other recommended columns with technical details. Can be used to track and detect batch effects: - Project - Pool_ID - Sample_Plate - Sample_Well - Sample_Group - Sentrix_ID - Sentrix_Position\n##Pheno columns: - Gender (will be predicted) - Type - Condition - Any other information\nIn the following table, you can take a look at the sample sheet used for this project.\n\n\nCode\n# \n# renv::install(\"circlize\")\n# renv::install(\"RColorBrewer\")\n# renv::install(\"DT\")\n# renv::install(\"ggplot2\")\n# renv::install(\"shiny\")\n# renv::install(\"shinyWidgets\")\n# renv::install(\"ggplot2\")\n# renv::install(\"data.table\")\n# renv::install(\"writexl\")\n\nlibrary(\"circlize\")\n\n\n========================================\ncirclize version 0.4.15\nCRAN page: https://cran.r-project.org/package=circlize\nGithub page: https://github.com/jokergoo/circlize\nDocumentation: https://jokergoo.github.io/circlize_book/book/\n\nIf you use it in published research, please cite:\nGu, Z. circlize implements and enhances circular visualization\n  in R. Bioinformatics 2014.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(circlize))\n========================================\n\n\nCode\nlibrary(\"RColorBrewer\")\nlibrary(\"DT\")\nlibrary(\"ggplot2\")\nlibrary(\"shiny\")\n\n\n\nAttaching package: 'shiny'\n\n\nThe following objects are masked from 'package:DT':\n\n    dataTableOutput, renderDataTable\n\n\nCode\nlibrary(\"shinyWidgets\")\nlibrary(\"data.table\")\nlibrary(\"writexl\")\n\ntop_beta &lt;- function(beta_values, n=1000){\n  sdv &lt;- apply(beta_values, 1, sd)\n  top100 &lt;- names(head(sort(sdv,decreasing=T), n))\n  beta_top100 &lt;- beta_values[top100,]\n  return(beta_top100)\n}\n\n\n\n\nCode\ndtable&lt;-function(data){\n  DT::datatable(\n        { data},\n        filter = 'top',\n        # selection = list(mode = 'multiple', selected = c(1:10), target = 'column', selectable = c(-2, -3)),\n        fillContainer = F,\n        # style =  \"bootstrap\",\n\n        extensions = 'Buttons',\n\n        options = list(\n          paging = TRUE,\n          searching = TRUE,\n          fixedColumns = TRUE,\n          autoWidth = FALSE,\n          scrollX=TRUE,\n          digits=4,\n          ordering = TRUE,\n          dom = 'Bfrtip',\n          buttons = list(\n            list(\n              extend = \"collection\",\n              text = 'download entire dataset',\n              action = DT::JS(\"function ( e, dt, node, config ) {\n                                                    Shiny.setInputValue('test', true, {priority: 'event'});\n                                                    }\")\n            ),\n            'copy',\n            'csv',\n            'excel'\n          ),\n\n          class = \"display\",\n          server=TRUE\n        ),\n      ) |&gt; DT::formatRound(which(sapply(data,is.double)),4)\n}\n\n\n\n\nCode\nmyModal &lt;- function() {\n\n  div(id = \"test\",\n      shiny::modalDialog(downloadButton(\"download1\",\"Download data as csv\"),\n                         br(),\n                         br(),\n                         downloadButton(\"download2\",\"Download data as excel\"),\n                         easyClose = TRUE, title = \"Download Table\")\n  )\n}\n\nrenderDT&lt;- function(data){\n  output$dtable &lt;- DT::renderDataTable({\n    dtable(data)\n  })\n\n    shiny::observeEvent(input$test, {\n      print(\"hello\")\n      showModal(myModal())\n    })\n    output$download1 &lt;- shiny::downloadHandler(\n      filename = function() {\n        paste(\"data-\", Sys.Date(), \".csv\", sep=\"\")\n      },\n      content = function(file) {\n        write.csv(data, file)\n      }\n    )\n\n    output$download2 &lt;- shiny::downloadHandler(\n      filename = function() {\n        paste(\"data-\", Sys.Date(), \".xlsx\", sep=\"\")\n      },\n      content = function(file) {\n        writexl::write_xlsx(data, file)\n      })\n}\n\n\n\n\nCode\ndtable(data.table::as.data.table(ss))"
  },
  {
    "objectID": "heatmap.html#sec-Heatmap",
    "href": "heatmap.html#sec-Heatmap",
    "title": "preprocess",
    "section": "Heatmap",
    "text": "Heatmap\nFirst of all let’s define some functions for the color scales our heatmap will use:\n\nColor functions:\n\n\nCode\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n# Simple continuous palette: \ncol_fun = colorRamp2(c(-1,-0.1, 0.1, 1), c(\"blue\",\"white\",\"white\",\"red\"))\n\n# Continuous, uses a predefined color palette or manual color vector\ncol_fn&lt;- function(x,n=100,palette=viridis::cividis(n)){\n  colorRamp2( seq(min(x,na.rm = T),max(x, na.rm = T),length.out=n), palette)\n}\n\n# Continuous, monochrome breakpoints based on values distribution (quartiles):\ncol_fq &lt;- function(x,probs=c(0,0.25,0.5,0.75,1),color ){\n  colorRamp2( quantile(x,probs=probs), \n              monochromeR::generate_palette(\"white\",\n                blend_colour = color,  n_colours = length(probs)\n                )\n  )\n}\n\n# Continuous, monochrome can manually set breakpoints:\ncol_fbp &lt;- function(x,bp,color){\n  colorRamp2( bp, \n              monochromeR::generate_palette(\"white\",\n                blend_colour = color,  n_colours = length(bp)\n                )\n              )\n}\n\n\n\n\nHeatmaps function\nHere we define the function for the heat maps\n\n\nCode\nlibrary(ComplexHeatmap)\n\n\nmeth_heatmap &lt;- function(samplesheet, bvals, annotation, idcol=\"rn\"   ){\n  require(ComplexHeatmap)\n  require(data.table)\n  data.table::setDT(annotation)\n  setkeyv(annotation,idcol)\n  \n  # Annotation object for top annotation:\n  data.table::setDT(samplesheet)\n  # purity = samplesheet[,.SD,.SDcols=startsWith(names(samplesheet),\"purity\")]\n  ha_column = HeatmapAnnotation(\n    annotation_name_side = \"left\", \n    Type = anno_block(gp=gpar(fill= rainbow(n=length(unique(samplesheet$Type)))),\n                      labels = unique(samplesheet$Type), #unique(samplesheet$Type),\n                      labels_gp = gpar(col = \"white\", fontsize = 10)),\n    Condition = samplesheet$Condition,\n    # purity = unlist(purity),\n\n    col = #A list of named vectors were names = vector values and value = color.\n      list(\n      Condition = setNames(\n        palette.colors(length(unique(samplesheet$Condition)),\n                       palette = \"Dark\"\n                       ),\n        unique(samplesheet$Condition)\n      ),\n      # purity = col_fbp(x=samplesheet,bp=seq(min(purity),max(purity),length.out=5),color=\"green3\"),\n      NULL\n      )\n  )\n  \n  heat_list&lt;-ComplexHeatmap::Heatmap(\n      matrix = bvals, \n            #Color:\n            col=col_fn(bvals),#col_fun, # Color defined in col_fun above\n            na_col=\"grey\",\n            \n            #Label:\n            heatmap_legend_param = list(\n            at = c(0, 0.5, 1),\n            # labels = c(\"hypo\", 0, \"hyper\"),\n            title = paste0(expression(beta),\"-vals\"),\n            legend_height = unit(4, \"cm\"),\n            title_position = \"leftcenter-rot\"\n            ),\n            \n            \n            #Rows:\n            show_row_names = F,\n            #row_title = \"Amino acids\",\n            row_names_side = \"left\",\n            #left_annotation = ha_boxplot,\n            # clustering_distance_rows = \"manhattan\",\n            \n            #Columns:\n            show_column_names = TRUE,\n            column_names_side = \"top\",\n            column_title_side = \"bottom\",\n            column_names_max_height = unit(4, \"cm\"),\n            column_names_gp = gpar(fontsize = 9),\n            column_names_rot = 90,\n            cluster_columns=F,\n            column_split = samplesheet$Type, #factor(samplesheet$Type,levels = c(\"Case\",\"Control\")),\n            column_title = paste0(expression(beta),\" values\"),\n  \n            #Annotation bar:\n            top_annotation = ha_column,\n           \n              \n            \n            #Aspect ratios:\n            #column_dend_height=unit(4, \"cm\")\n             heatmap_width = unit(2, \"npc\"),\n            heatmap_height = unit(16, \"cm\"),\n                )\n  # Add methylation difference heatmap:  \n  for (contrast in unique(annotation$Contrast))\n  {\n\n    DMPann &lt;- annotation[ Contrast==contrast,]\n    # make sure to have one and only one bval for each cg probe, if more than one do mean:\n    setDT(DMPann)\n    setkeyv(DMPann,idcol)\n    # Remove all annotation but methylation difference in contrast and probeid:\n    mat&lt;-DMPann[rownames(bvals) ,.SD,on=idcol,.SDcols=c(\"diff_meanMeth\",idcol)]\n    # If more than one id (idcol) do the mean\n    mat&lt;-mat[,.(bval=mean(diff_meanMeth)),by=idcol]\n    mat&lt;-mat$bval\n    heat_list = heat_list + Heatmap(\n      matrix = mat, \n      name = contrast,\n            #Color:\n            col=col_fun,#col_fun, # Color defined in col_fun above\n            na_col=\"white\",\n            \n            #Legend:\n            heatmap_legend_param = list(\n            at = c(-1, -0.1, 0.1, 1),\n            # labels = c(\"hypo\", \"\", \"\", \"hyper\"),\n            title = paste0(expression(beta),\"diff\"),\n            legend_height = unit(4, \"cm\"),\n            title_position = \"leftcenter-rot\"\n            ),\n      show_heatmap_legend = ifelse(contrast == unique(annotation$Contrast)[1],T,F ),\n            \n            #Columns:\n            show_column_names = TRUE,\n            column_names_side = \"top\",\n            column_names_max_height = unit(2, \"cm\"),\n            column_names_gp = gpar(fontsize = 9),\n            column_names_rot = 90,\n            heatmap_width = unit(2, \"npc\"),\n            \n                )\n    \n  }\n  # Add annotation\n  ann&lt;-annotation[,.(V1=unique(Relation_to_Island)),by=idcol]\n  \n  mat&lt;-ann[rownames(bvals),V1,on=idcol]\n  heat_list&lt;-heat_list + \n    Heatmap(\n      matrix = mat, \n      name = \"Relation to island\",\n      #Color:\n      col=setNames(palette.colors(length(unique(annotation$Relation_to_Island)),palette = \"Set1\"),sort(unique(annotation$Relation_to_Island))),#col_fun, # Color defined in col_fun above\n      #Legend:\n      show_heatmap_legend = TRUE,\n      show_column_names = TRUE,\n      column_names_side = \"top\",\n      column_names_max_height = unit(2, \"cm\"),\n      column_names_gp = gpar(fontsize = 9),\n      column_names_rot = 90,\n      heatmap_width = unit(1, \"npc\"),\n            \n                )\n}"
  },
  {
    "objectID": "heatmap.html#pdc11",
    "href": "heatmap.html#pdc11",
    "title": "preprocess",
    "section": "PDC11",
    "text": "PDC11\n\nMethylation data: The 2-channel methylation intensity file format .idat\n\n\nCode\nss_PDC11 &lt;- data.table::as.data.table(tar_read(ss_clean_PDC11_batch2))\nbetas_PDC11 &lt;- tar_read(betas_PDC11_batch2)\ncolnames(betas_PDC11) &lt;- ss_PDC11[colnames(betas_PDC11),Sample_Name,on=\"barcode\"]\n\n# Sort by type:\nss_PDC11 &lt;- setorder(ss_PDC11,Type)\nbetas_PDC11&lt;-betas_PDC11[,ss_PDC11$Sample_Name]\n\n\n\n\nDMPs Annotation data:\nA dataframe with differentially methylated probes and annotation.\n\n\nCode\nlibrary(data.table)\n\nDMPann_PDC11&lt;-tar_read(dmps_mod1_PDC11_batch2)\nDMPann_PDC11&lt;-data.table::setDT(DMPann_PDC11)\nidcol&lt;-\"EPICv1_Loci\"\nsetkeyv(DMPann_PDC11,idcol)\nPROBEIDS &lt;- intersect (rownames(betas_PDC11), DMPann_PDC11[[idcol]])\nbetas_PDC11 &lt;- betas_PDC11[PROBEIDS,]\nDMPann_PDC11 &lt;- DMPann_PDC11[PROBEIDS,]\n#Transform to data.table format to visualize and perform data manipulations\nDMPann_PDC11&lt;-data.table::setDT(DMPann_PDC11)\n\n\n\n\nHeatmap\n\n\nCode\nheat_list_PDC11&lt;-meth_heatmap(samplesheet = ss_PDC11, bvals = betas_PDC11, annotation = DMPann_PDC11, idcol = idcol)\nComplexHeatmap::draw(heat_list_PDC11, row_title = paste0(\"top \",NROW(betas_PDC11),\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\"),\n    column_title = \"PDC11 cell line Differentially Methylated Probes Heatmap\", column_title_gp = gpar(fontsize = 16),  merge_legend = TRUE)"
  },
  {
    "objectID": "heatmap.html#h358",
    "href": "heatmap.html#h358",
    "title": "preprocess",
    "section": "H358",
    "text": "H358\n\nMethylation data: The 2-channel methylation intensity file format .idat\n\n\nCode\nss_H358 &lt;- data.table::as.data.table(tar_read(ss_clean_H358))\nbetas_H358 &lt;- tar_read(top_H358)\ncolnames(betas_H358) &lt;- ss_H358[colnames(betas_H358),Sample_Name,on=\"barcode\"]\n# Sort by type:\nsetorder(ss_H358,Type)\nbetas_H358&lt;-betas_H358[,ss_H358$Sample_Name]\n\n\n\n\nDMPs Annotation data:\nA dataframe with differentially methylated probes and annotation.\n\n\nCode\nlibrary(data.table)\n\nDMPann_H358&lt;-tar_read(dmps_mod1_H358)\nDMPann_H358&lt;-data.table::setDT(DMPann_H358)\nidcol&lt;-\"Name\"\nsetkeyv(DMPann_H358,idcol)\nPROBEIDS &lt;- intersect (rownames(betas_H358), DMPann_H358[[idcol]])\nbetas_H358 &lt;- betas_H358[PROBEIDS,]\nDMPann_H358 &lt;- DMPann_H358[PROBEIDS,]\n#Transform to data.table format to visualize and perform data manipulations\nDMPann_H358&lt;-data.table::setDT(DMPann_H358)\n\n\n\n\nHeatmap\n\n\nCode\nheat_list_H358&lt;-meth_heatmap(samplesheet = ss_H358, bvals = betas_H358, annotation = DMPann_H358, idcol = idcol)\nComplexHeatmap::draw(heat_list_H358, row_title = paste0(\"top \",NROW(betas_H358),\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\"),\n    column_title = \"H358 cell line Differentially Methylated Probes Heatmap\", column_title_gp = gpar(fontsize = 16),  merge_legend = TRUE)"
  },
  {
    "objectID": "heatmap.html#h2009",
    "href": "heatmap.html#h2009",
    "title": "preprocess",
    "section": "H2009",
    "text": "H2009\n\nMethylation data: The 2-channel methylation intensity file format .idat\n\n\nCode\nss_H2009 &lt;- data.table::as.data.table(tar_read(ss_clean_H2009))\nbetas_H2009 &lt;- tar_read(top_H2009)\ncolnames(betas_H2009) &lt;- ss_H2009[colnames(betas_H2009),Sample_Name,on=\"barcode\"]\n# Sort by type:\nsetorder(ss_H2009,Type)\nbetas_H2009&lt;-betas_H2009[,ss_H2009$Sample_Name]\n\n\n\n\nDMPs Annotation data:\nA dataframe with differentially methylated probes and annotation.\n\n\nCode\nlibrary(data.table)\n\nDMPann_H2009&lt;-tar_read(dmps_mod1_H2009)\nDMPann_H2009&lt;-data.table::setDT(DMPann_H2009)\nidcol&lt;-\"Name\"\nsetkeyv(DMPann_H2009,idcol)\nPROBEIDS &lt;- intersect (rownames(betas_H2009), DMPann_H2009[[idcol]])\nbetas_H2009 &lt;- betas_H2009[PROBEIDS,]\nDMPann_H2009 &lt;- DMPann_H2009[PROBEIDS,]\n#Transform to data.table format to visualize and perform data manipulations\nDMPann_H2009&lt;-data.table::setDT(DMPann_H2009)\n\n\n\n\nHeatmap\n\n\nCode\nheat_list_H2009&lt;-meth_heatmap(samplesheet = ss_H2009, bvals = betas_H2009, annotation = DMPann_H2009, idcol = idcol)\nComplexHeatmap::draw(heat_list_H2009, row_title = paste0(\"top \",NROW(betas_H2009),\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\"),\n    column_title = \"H2009 cell line Differentially Methylated Probes Heatmap\", column_title_gp = gpar(fontsize = 16),  merge_legend = TRUE)"
  },
  {
    "objectID": "heatmap.html#plot-size",
    "href": "heatmap.html#plot-size",
    "title": "preprocess",
    "section": "Plot size:",
    "text": "Plot size:\nThere are many things you can do in order to change the plot size and aesthetics. I won’t go in detail but I think that getting the right plot size can be a bit tricky. So here is some advice on how to get it right. Here is a function to get the width and hight of your plot.\n\n\nCode\ncalc_ht_size = function(ht, unit = \"inch\") {\n    pdf(NULL)\n    ht = ComplexHeatmap::draw(ht)\n    w = ComplexHeatmap:::width(ht)\n    w = convertX(w, unit, valueOnly = TRUE)\n    h = ComplexHeatmap:::height(ht)\n    h = convertY(h, unit, valueOnly = TRUE)\n    dev.off()\n\n    c(w, h)\n}\n\n\n\n\nCode\nsize &lt;- calc_ht_size(heat_list_PDC11)\npdf(paste0(\"PDC11_heatmap.pdf\"), width = size[1], height = size[2])\nheat_list_PDC11\ndev.off()\n\n\npng \n  2 \n\n\nCode\nsize &lt;- calc_ht_size(heat_list_H2009)\npdf(paste0(\"H2009_heatmap.pdf\"), width = size[1], height = size[2])\nheat_list_H2009\ndev.off()\n\n\npng \n  2 \n\n\nCode\nsize &lt;- calc_ht_size(heat_list_H358)\npdf(paste0(\"H358_heatmap.pdf\"), width = size[1], height = size[2])\nheat_list_H358\ndev.off()\n\n\npng \n  2 \n\n\n\n\n\n\n\n\n\n(a) PDC11\n\n\n\n\n\n\n\n\n\n(b) H358\n\n\n\n\nFigure 1: \n\n\nWhen the number of rows is high the image gets compressed and we can loose some information. Also, sometimes we have different heatmaps with a different number of rows for each of them, which results on different aspect ratios. If we want to control the height of each row and keep it stable between plots we must consider: - By convention resolution in R is 96, which means 96 pixels fit on an inch. So if you don’t want to loose any line your cell height should be 1 pixel tall at least. 96 lines in 1 inch means each line is 0.26mm which is already very small, so don’t try to make it smaller.\n\nComplexheatmat default top and bottom margins are 2mm so you must add those 4mm to your plot size.\nThe relationship between main heatmap object and cell height is proportional: The height of the main plot is controlled by the height parameter the rest is annotation as explained in the docs. So let’s find the ratio for a given cell size:\n\n\n\nCode\nlibrary(ComplexHeatmap)\nplotsizes=c(100,200)\ny = NULL\nfor(nr in plotsizes) {\n  betas&lt;-top_beta(betas_PDC11,nr)\n  \n    ht = ComplexHeatmap::draw(meth_heatmap(ss_PDC11,betas,annotation = DMPann_PDC11,idcol = \"EPICv1_Loci\"),height=unit(1/96, \"inch\")*nr)\n    ht_height = sum(component_height(ht)) + unit(4, \"mm\")\n    ht_height = convertHeight(ht_height, \"inch\", valueOnly = TRUE)\n    y = c(y, ht_height)\n}\n\n\n\n\n\n\n\n\nCode\nsizemod &lt;- lm(y ~ plotsizes)\nsizemod\n\n\n\nCall:\nlm(formula = y ~ plotsizes)\n\nCoefficients:\n(Intercept)    plotsizes  \n    2.43104      0.01042  \n\n\nNow we use the formula to control for the plot size, so we can make the plots from the different cell lines proportional in row height:\n\n\nCode\n png(paste0(\"PDC11_heatmap_resized.png\"),\n     width =  14,\n     height = sizemod$coefficients[2]*NROW(betas_PDC11) + sizemod$coefficients[1],\n     units = \"in\",\n     res = 96\n     )\nComplexHeatmap::draw(heat_list_PDC11, row_title = paste0(\"top \",NROW(betas_PDC11) ,\" across-sample EPICv1 most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*NROW(betas_PDC11), column_title = \"PDC11 cell line Differentially Methylated Probes Heatmap\",  merge_legend = TRUE)\n\ndev.off()\n\n png(paste0(\"H358_heatmap_resized.png\"),\n     width =  14,\n     height = sizemod$coefficients[2]*NROW(betas_H358) + sizemod$coefficients[1]+2,\n     units = \"in\",\n     res = 96\n     )\nComplexHeatmap::draw(heat_list_H358, row_title = paste0(\"top \",NROW(betas_H358) ,\" across-sample EPICv1 most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*NROW(betas_H358), column_title = \"H358 cell line Differentially Methylated Probes Heatmap\",  merge_legend = TRUE)\n\ndev.off()\n\n\n png(paste0(\"H2009_heatmap_resized.png\"),\n     width =  14,\n     height = sizemod$coefficients[2]*NROW(betas_H2009) + sizemod$coefficients[1],\n     units = \"in\",\n     res = 96\n     )\nComplexHeatmap::draw(heat_list_H2009, row_title = paste0(\"top \",NROW(betas_H2009) ,\" across-sample EPICv1 most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*NROW(betas_H2009), column_title = \"H2009 cell line Differentially Methylated Probes Heatmap\",  merge_legend = TRUE)\n\ndev.off()\n\n\n\n\n\n\n\n\n\n(a) PDC11\n\n\n\n\n\n\n\nH358\n\n\n\n\nFigure 2:"
  },
  {
    "objectID": "heatmap.html#function-to-select-top-n-variable-sites",
    "href": "heatmap.html#function-to-select-top-n-variable-sites",
    "title": "preprocess",
    "section": "Function to select top n variable sites:",
    "text": "Function to select top n variable sites:\n\n\nCode\ntop_beta &lt;- function(beta_values, n=1000){\n  sdv &lt;- apply(beta_values, 1, sd)\n  topn &lt;- names(head(sort(sdv,decreasing=T), n))\n  beta_topn &lt;- beta_values[topn,]\n  return(beta_topn)\n}"
  },
  {
    "objectID": "heatmap.html#individual-plots",
    "href": "heatmap.html#individual-plots",
    "title": "preprocess",
    "section": "Individual plots:",
    "text": "Individual plots:\n\nH2009\nLoad the data:\n\n\nCode\nss_H2009 &lt;- readRDS(\"data/ss_H2009.rds\")[-1,]\nbetas_H2009 &lt;- readRDS(\"data/betas_H2009.rds\")\nDMPann_H2009 &lt;- readRDS(\"data/DMPann_H2009.rds\")\nidcol&lt;-\"Name\"\n\n\nApply the function to select the top 1000 most variable sites:\n\n\nCode\nn = 1000                                               # change this value to select a different number of probes\nbetas_H2009_heat &lt;- top_beta(betas_H2009,n=n)\n\n\nGenerate the plot using the functions defined in the Section 0.3 section:\n\n\nCode\nheat_list_H2009 &lt;- meth_heatmap(samplesheet = ss_H2009, bvals = betas_H2009_heat, annotation = DMPann_H2009, idcol = idcol)\n\n\nSave with the desired resolution and titles:\n\n\nCode\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n\nComplexHeatmap::draw(heat_list_H2009, row_title = paste0(\"top \",n ,\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*n, column_title = paste0( \"H2009 cell line top \", n, \" most variable Probes Heatmap\"),  merge_legend = TRUE)\n\n\n\n\n\n\n\nH358\nFirst we need to load the data:\n\n\nCode\nss_H358 &lt;- readRDS(\"data/ss_H358.rds\")[-1,]\nbetas_H358 &lt;- readRDS(\"data/betas_H358.rds\")\nDMPann_H358 &lt;- readRDS(\"data/DMPann_H358.rds\")\nidcol&lt;-\"Name\"\n\n\nThen apply the function to select the top 1000 most variable sites:\n\n\nCode\nn = 1000                                               # change this value to select a different number of probes\nbetas_H358_heat &lt;- top_beta(betas_H358,n=n)\n\n\nNow we can generate the plot this using the functions defined Section 0.3:\n\n\nCode\nheat_list_H358 &lt;- meth_heatmap(samplesheet = ss_H358, bvals = betas_H358_heat, annotation = DMPann_H358, idcol = idcol)\n\n\nAnd finally save with the desired resolution and titles:\n\n\nCode\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n\nComplexHeatmap::draw(heat_list_H358, row_title = paste0(\"top \",n ,\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*n, column_title = paste0( \"H358 cell line top \", n, \" most variable Probes Heatmap\"),  merge_legend = TRUE)\n\n\n\n\n\n\n\nPDC11_batch2\nFirst we need to load the data:\n\n\nCode\nss_PDC11_batch2 &lt;- readRDS(\"data/ss_PDC11_batch2.rds\")[-1,]\nbetas_PDC11_batch2 &lt;- readRDS(\"data/betas_PDC11_batch2.rds\")\nDMPann_PDC11_batch2 &lt;- readRDS(\"data/DMPann_PDC11_batch2.rds\")\n\n\n\n\n\n\n\n\n🛑✋ idcol variable changes for PDC11\n\n\n\nIn the idcol variable, we store the name of the probe that contains the methylation measure for a specific cg site. These probe names vary for EPIC v2 arrays but remain consistent for 450k and EPIC arrays. However, in the case of EPIC v2 arrays, we can utilize the information in the EPICv1_Loci column, which contains the equivalent cg site ID if available from the EPIC v1 array. This allows us to compare cg sites across different array types.\n\n\n\n\nCode\nidcol&lt;-\"EPICv1_Loci\"\n\n\nThen apply the function to select the top 1000 most variable sites:\n\n\nCode\nn = 1000                                               # change this value to select a different number of probes\nbetas_PDC11_batch2_heat &lt;- top_beta(betas_PDC11_batch2,n=n)\n\n\nNow we can generate the plot this using the functions defined Section 0.3:\n\n\nCode\nheat_list_PDC11_batch2 &lt;- meth_heatmap(samplesheet = ss_PDC11_batch2, bvals = betas_PDC11_batch2_heat, annotation = DMPann_PDC11_batch2, idcol = idcol)\n\n\nAnd finally save with the desired resolution and titles:\n\n\nCode\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n\nComplexHeatmap::draw(heat_list_PDC11_batch2, row_title = paste0(\"top \",n ,\" across-sample most variable sites\"), row_title_gp = gpar(col = \"darkblue\") , height = unit(1*1/96, \"inch\")*n, column_title = paste0( \"PDC11_batch2 cell line top \", n, \" most variable Probes Heatmap\"),  merge_legend = TRUE)"
  },
  {
    "objectID": "heatmap.html#combined-plot",
    "href": "heatmap.html#combined-plot",
    "title": "preprocess",
    "section": "Combined plot:",
    "text": "Combined plot:\nIn this case we are going to combine the 3 cell lines into the same plot so we can compare between cell lines. In order to see differences between the cell lines we could choose one of these options:\nOption A: Use the top variable sites across all samples (same approach as before but using all samples now)\n- Identify Top Variable Sites:\n    Calculate variability for each site across all samples.\n    Select the top variable sites based on this calculation.\n\n- Generate Combined Plot:\n    Plot the selected top variable sites. \n    Use different colors or symbols for each cell line.\n    \nOption B: Merge the top 1000 sites from each cell line\n- Use the Top 1000 Sites for each Cell Line we have calculated above.\n- Merge into a Combined Pool.\n- Generate Combined Plot.\nIn this case we are going to choose option B, but I am sure you will be able to reproduce the steps to make option A 😉.\nCombine the top1000 sites for each cell line into a single set of probes:\n\n\nCode\nl_betas_ids &lt;- list(rownames(betas_PDC11_batch2_heat),rownames(betas_H358_heat),rownames(betas_H2009_heat))\ncommon_cgsites &lt;- Reduce(union,l_betas_ids)\nlength(common_cgsites)\n\n\n[1] 2888\n\n\nTrim the beta values to contain only those sites (if present) for all the cell lines:\n\n\nCode\nlibrary(data.table)\nl_betas &lt;- list(betas_PDC11_batch2, betas_H358, betas_H2009)\nbetas_trimmed &lt;- lapply(l_betas,function(x){\n  dt &lt;- as.data.table(x,keep.rownames = \"id\")\n  dt &lt;- dt[common_cgsites,,on=\"id\"]\n  return(dt)\n})\n\n\nCombine the beta values for all samples in a single object:\n\n\nCode\ncommon_betas &lt;- Reduce(function(x,y)merge(x,y,by = 'id',all=T), betas_trimmed)\nb&lt;- as.matrix(common_betas[,-1])\nrownames(b)&lt;-common_betas$id\ncommon_betas &lt;- b[complete.cases(b),]\n\n\n\n\n\n\n\n\nNA action\n\n\n\nA total of 597 probes, out of the 2291 available, are absent for certain cell lines. This makes it impossible for the distance calculation algorithm to work since all values within the grouping factor are missing. To adress this issue this probes have been removed.\n\n\nCombine annotation and samplesheet:\n\n\nCode\n# Add arraytype in all sample sheets:\nss_H2009[,arraytype:=\"EPIC\"]\nss_H358$arraytype &lt;- \"EPIC\"\ncommon_ss &lt;- rbindlist(list(ss_PDC11_batch2,ss_H2009,ss_H358),use.names=TRUE)\n# Make idcol consistent for EPICv2:\nDMPann_PDC11_batch2$Name &lt;- DMPann_PDC11_batch2$EPICv1_Loci\ncommon_annotation &lt;- rbindlist(list(DMPann_PDC11_batch2,DMPann_H2009,DMPann_H358),use.names=TRUE, fill=TRUE)\ncolnames(common_betas) &lt;- common_ss[colnames(b),Sample_Name,on=\"barcode\"]\n\n\nModify the heatmap functions (#**):\n\n\nCode\nlibrary(ComplexHeatmap)\n\n\nmeth_heatmap2 &lt;- function(samplesheet, bvals, annotation, idcol=\"rn\", sample_ids = \"Sample_Name\"   ){\n  require(ComplexHeatmap)\n  require(data.table)\n  data.table::setDT(annotation)\n  setkeyv(annotation,idcol)\n  # Order beta values same as samplesheet:\n  bvals &lt;- bvals[,with(samplesheet,get(sample_ids))]\n  \n  # Annotation object for top annotation:\n  data.table::setDT(samplesheet)\n  # purity = samplesheet[,.SD,.SDcols=startsWith(names(samplesheet),\"purity\")]\n  ha_column = HeatmapAnnotation(\n    annotation_name_side = \"left\", \n    \n    CL = anno_block( gp=gpar( fill=RColorBrewer::brewer.pal(n=length(unique(samplesheet$CL)) , name = \"Accent\")),                                                                             \n                      labels = unique(samplesheet$CL), #unique(samplesheet$Type),                        #**\n                      labels_gp = gpar(col = \"black\", fontsize = 11)),                                  #**\n    Type = samplesheet$Type,\n\n    Condition = samplesheet$Condition,\n    # purity = unlist(purity),\n\n    col = #A list of named vectors were names = vector values and value = color.\n      list(\n      Condition = setNames(\n        palette.colors(length(unique(samplesheet$Condition)),\n                       palette = \"Dark\"\n                       ),\n        unique(samplesheet$Condition)\n      ),\n      Type = setNames(\n        rainbow(n=length(unique(samplesheet$Type))),\n        unique(samplesheet$Type)\n      ),\n      # purity = col_fbp(x=samplesheet,bp=seq(min(purity),max(purity),length.out=5),color=\"green3\"),\n      NULL\n      )\n    \n  )\n  \n  heat_list&lt;-ComplexHeatmap::Heatmap(\n    matrix = bvals, \n    #Color:\n    col=col_fn(bvals),#col_fun, # Color defined in col_fun above\n    na_col=\"grey\",\n    \n    #Label:\n    heatmap_legend_param = list(\n    at = c(0, 0.5, 1),\n    # labels = c(\"hypo\", 0, \"hyper\"),\n    title = paste0(expression(beta),\"-vals\"),\n    legend_height = unit(4, \"cm\"),\n    title_position = \"leftcenter-rot\"\n    ),\n    \n    \n    #Rows:\n    show_row_names = F,\n    #row_title = \"Amino acids\",\n    row_names_side = \"left\",\n    #left_annotation = ha_boxplot,\n    # clustering_distance_rows = \"manhattan\",\n    \n    #Columns:\n    show_column_names = TRUE,\n    column_names_side = \"top\",\n    column_title_side = \"bottom\",\n    column_names_max_height = unit(4, \"cm\"),\n    column_names_gp = gpar(fontsize = 9),\n    column_names_rot = 90,\n    cluster_columns=F,\n    column_split = droplevels(samplesheet$CL), #factor(samplesheet$Type,levels = c(\"Case\",\"Control\")),       #**\n    column_title = paste0(expression(beta),\" values\"),\n\n    #Annotation bar:\n    top_annotation = ha_column,\n   \n      \n    \n    #Aspect ratios:\n    #column_dend_height=unit(4, \"cm\")\n    heatmap_width = unit(2, \"npc\"),\n    heatmap_height = unit(16, \"cm\")\n  )\n  \n  ann&lt;-annotation[,.(V1=unique(Relation_to_Island)),by=idcol]\n  \n  mat&lt;-ann[rownames(bvals),,on=idcol][!duplicated(Name),V1]                                             #**\n  heat_list&lt;-heat_list + \n    Heatmap(\n      matrix = mat, \n      name = \"Relation to island\",\n      #Color:\n      col=setNames(palette.colors(length(unique(annotation$Relation_to_Island)),palette = \"Set1\"),sort(unique(annotation$Relation_to_Island))),#col_fun, # Color defined in col_fun above\n      #Legend:\n      show_heatmap_legend = TRUE,\n      show_column_names = TRUE,\n      column_names_side = \"top\",\n      column_names_max_height = unit(2, \"cm\"),\n      column_names_gp = gpar(fontsize = 9),\n      column_names_rot = 90,\n      heatmap_width = unit(1, \"npc\"),\n            \n                )\n} \n\n\nGenerate the heatmap:\n\n\nCode\nheat_list_common &lt;- meth_heatmap2(samplesheet = common_ss, bvals = common_betas, annotation = common_annotation, idcol = \"Name\")\n\n\n`use_raster` is automatically set to TRUE for a matrix with more than\n2000 rows. You can control `use_raster` argument by explicitly setting\nTRUE/FALSE to it.\n\nSet `ht_opt$message = FALSE` to turn off this message.\n\n\n'magick' package is suggested to install to give better rasterization.\n\nSet `ht_opt$message = FALSE` to turn off this message.\n\n\nAdjust dimensions:\n\n\nCode\nlibrary(ComplexHeatmap)\nplotsizes=c(100,200)\ny = NULL\nfor(nr in plotsizes) {\n  betas&lt;-top_beta(betas_PDC11,nr)\n  \n    ht = ComplexHeatmap::draw(meth_heatmap2(samplesheet = common_ss, bvals = common_betas, annotation = common_annotation, idcol = \"Name\"),height=unit(1/96, \"inch\")*nr)\n    ht_height = sum(component_height(ht)) + unit(4, \"mm\")\n    ht_height = convertHeight(ht_height, \"inch\", valueOnly = TRUE)\n    y = c(y, ht_height)\n}\nsizemod &lt;- lm(y ~ plotsizes)\nsizemod\n\n\nDraw and save:\n\n\nCode\n png(paste0(\"Combined_heatmap_resized.png\"),\n     width =  14,\n     height = sizemod$coefficients[2]*NROW(common_betas) + sizemod$coefficients[1],\n     units = \"in\",\n     res = 96\n     )\nComplexHeatmap::draw(heat_list_common,\n                     row_title = paste0(\"cg Sites\"),\n                     row_title_gp = gpar(col = \"darkblue\"),\n                     height = unit(1*1/96, \"inch\")*NROW(common_betas),\n                     column_title = paste0( \"Combined Cell Lines: Top 1000 Most Variable Sites from each Cell Line\"),\n                     merge_legend = TRUE\n                     )\ndev.off()\n\n\n\n\n\n\n\n\n\n(a) top1k_combined\n\n\n\n\nFigure 3: ?(caption)"
  }
]